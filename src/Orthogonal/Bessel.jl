## Bessel
@register1 Bessel AbstractCCOP1


"""
    Bessel{Œ±}

Implements the [Bessel](https://dlmf.nist.gov/18.34) polynomials, introduced by [Krall and Frink](https://www.ams.org/journals/tran/1949-065-01/S0002-9947-1949-0028473-1/S0002-9947-1949-0028473-1.pdf) (with `b=2`). The  case `a=2` corresponds to the 
[Bessel](https://en.wikipedia.org/wiki/Bessel_polynomials) polynomials of Wikipedia. The Bessel  polynomials are not orthogonal over  a domain of the real  line, rather over an arbitray curve in the complex plane enclosing the  origin.  The weight  function is `œÅ(x)=(2œÄi)^(-1)‚àëŒì(Œ±)/Œì(Œ±+n-1)(-Œ≤/x)^n`,   where `Œ≤=2`.

```jldoctest
julia> using Polynomials, SpecialPolynomials

julia> ùêê = Rational{Int}
Rational{Int64}

julia> x = variable(Polynomial{ùêê})
Polynomial(x)

julia> [basis(Bessel{1//2, 2//1, ùêê}, i)(x) for i in 0:5]

6-element Array{Polynomial{Rational{Int64}},1}:
 Polynomial(1//1)
 Polynomial(1//1 + 1//4*x)
 Polynomial(1//1 + 3//2*x + 15//16*x^2)
 Polynomial(1//1 + 15//4*x + 105//16*x^2 + 315//64*x^3)
 Polynomial(1//1 + 7//1*x + 189//8*x^2 + 693//16*x^3 + 9009//256*x^4)
 Polynomial(1//1 + 45//4*x + 495//8*x^2 + 6435//32*x^3 + 96525//256*x^4 + 328185//1024*x^5)
```

"""
Bessel
export Bessel
basis_symbol(::Type{<:Bessel{Œ±}}) where {Œ±} = "C·µÖ"
Polynomials.domain(::Type{<:Bessel}) = Polynomials.Interval(0, Inf)

abcde(::Type{<:Bessel{Œ±}})  where {Œ±} = NamedTuple{(:a,:b,:c,:d,:e)}((1,0,0,Œ±, 2))

# From https://www.ams.org/journals/tran/1949-065-01/S0002-9947-1949-0028473-1/S0002-9947-1949-0028473-1.pdf we use
# kn = (n + Œ± - 1)_n / 2^n not (n+Œ±+1)_n/2^n
# Koepf suggests kn = (n + Œ± + 1)_n/2^n
function kn(P::Type{<:Bessel{Œ±}}, n::Int) where {Œ±}
    one(eltype(P))/2^n * Pochhammer(n+Œ±-1,n)
end
function k1k0(::Type{P}, k) where {Œ±, P<:Bessel{Œ±}}
    k < 0 && return zero(eltype(P))
    iszero(k) && return Œ±/2

    val = one(eltype(P))
    val *=  (2k+Œ±)*(2k+Œ±-1)
    val /= (k+Œ±-1)*2
    val
end
function k1k_1(P::Type{<:Bessel{Œ±}}, k) where {Œ±}
    @assert k > 0
    
    val = one(eltype(P))
    if k == 1
        val *= (Œ± + 1)*(Œ± + 2) # cancels  factor (Œ±-1)(Œ±-1)
        val /= 4
    else
        val *= (2k+Œ±-3) * (2k+Œ±-2) * (2k+Œ±-1) * (2k+Œ±)
        val /= 4 * (k+Œ±-2) * (k+Œ±-1)
    end
    return val
end
norm2(::Type{<:Bessel{Œ±}}, n) where  {Œ±} = -1^(n + Œ± -1) * Œì(1+n) * 2^(Œ±-1) / (Œì(n  + Œ± -2) *  (2n +  Œ± - 1))

weight_function(::Type{<:Bessel{Œ±}}) where {Œ±} = z -> (2œÄ*im)^(-1)*z^(Œ±-2) * exp(-2/z)
generating_function(::Type{<:Bessel}) = (t, x)  -> error("XXX")
function classical_hypergeometric(::Type{<:Bessel{Œ±}}, n, x) where {Œ±}
    as = (-n, n + Œ± - 1)
    bs = ()
    pFq(as, bs, -x/2) #/ kn
end

## Overrides XXX fails wih 1 and 2
#Bn(::Type{<:Bessel{1}}, n::Int, ::Type{S}) where {S} = error("Œ±=1 is not correct")
Bn(P::Type{<:Bessel{2}}, ::Val{0}) where {Œ±} = zero(eltype(P))
Cn(P::Type{<:Bessel{Œ±}}, ::Val{1}) where {Œ±} = -one(eltype(P))*4/(Œ±^2*(Œ± + 1))

bÃÇn(::Type{<:Bessel{2}}, n::Int)  = (one(eltype(P)) * 2)/(n*(2n+2))
bÃÇn(::Type{<:Bessel{2}}, ::Val{0})  = one(eltype(P)) * Inf
#cÃÇn(::Type{<:Bessel{2}}, n::Int, ::Type{S}) where {S} = one(S)/n/(2n-1)/(2n+1)
